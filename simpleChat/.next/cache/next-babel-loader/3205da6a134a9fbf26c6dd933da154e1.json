{"ast":null,"code":"var _jsxFileName = \"/Users/angelico/Desktop/Supabase/testingGround/simpleChat/pages/chatScreen.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createClient } from \"@supabase/supabase-js\";\nimport cookie from \"js-cookie\";\nimport moment from \"moment\";\nexport default class ChatScreen extends React.Component {\n  constructor() {\n    super();\n    this.supabase = createClient(\"http://localhost:8000\", \"LmT3VFkGhD\");\n    this.state = {\n      username: cookie.get(\"username\"),\n      messages: [],\n      message: null\n    };\n    console.log(this.state);\n  }\n\n  componentDidMount() {\n    this.subscribe();\n    this.loadMessages();\n  }\n\n  subscribe() {\n    this.supabase.from(\"messages\").eq(\"sender\", \"John\").on(\"*\", payload => {\n      console.log(\"REALTIME! \", payload);\n      console.log(\"/??? \", payload.new); // This is meant to test out ChangeMapper\n      // let change = ChangeMapper.convertChangeData(payload.columns, payload.record)\n      // console.log('this is the change ', change)\n\n      let updatedMessages = this.state.messages;\n      updatedMessages.push(payload.new);\n      this.setState({\n        messages: updatedMessages\n      });\n    }).subscribe();\n  }\n\n  async loadMessages() {\n    let messages = await this.supabase.from(\"messages\").select() // .eq('id', '2')\n    .order(\"inserted_at\", true); // .single()\n\n    console.log(\"lo and behold \", messages);\n    this.setState({\n      messages: messages.body\n    });\n  }\n\n  async sendMessage() {\n    let payload = [{\n      sender: this.state.username,\n      message: this.state.message,\n      inserted_at: moment().format()\n    }, {\n      sender: \"John\",\n      message: \"BOO\",\n      inserted_at: moment().format()\n    }];\n    let test = await this.supabase.from(\"messages\").insert(payload);\n    console.log(\"this is what is returned \", test);\n    this.setState({\n      message: \"\"\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: styles.main,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Hello\"), this.state.messages.map(message => {\n      return __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, message.sender, \": \", message.message);\n    }), __jsx(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Say Something!\"), __jsx(\"input\", {\n      type: \"text\",\n      class: \"input\",\n      id: \"message\",\n      name: \"message\",\n      value: this.state.message,\n      onChange: event => {\n        this.setState({\n          message: event.target.value\n        });\n      },\n      onKeyPress: event => {\n        if (event.key === \"Enter\") this.sendMessage();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      onClick: () => {\n        this.sendMessage();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Send\"));\n  }\n\n}\nconst styles = {\n  main: {\n    fontFamily: \"monospace\",\n    padding: 30\n  },\n  pre: {\n    whiteSpace: \"pre\",\n    overflow: \"auto\",\n    background: \"#333\",\n    maxHeight: 200,\n    borderRadius: 6,\n    padding: 5\n  },\n  code: {\n    display: \"block\",\n    wordWrap: \"normal\",\n    color: \"#fff\"\n  }\n};","map":{"version":3,"sources":["/Users/angelico/Desktop/Supabase/testingGround/simpleChat/pages/chatScreen.js"],"names":["createClient","cookie","moment","ChatScreen","React","Component","constructor","supabase","state","username","get","messages","message","console","log","componentDidMount","subscribe","loadMessages","from","eq","on","payload","new","updatedMessages","push","setState","select","order","body","sendMessage","sender","inserted_at","format","test","insert","render","styles","main","map","event","target","value","key","fontFamily","padding","pre","whiteSpace","overflow","background","maxHeight","borderRadius","code","display","wordWrap","color"],"mappings":"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","sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\nimport cookie from \"js-cookie\";\nimport moment from \"moment\";\n\nexport default class ChatScreen extends React.Component {\n  constructor() {\n    super();\n    this.supabase = createClient(\"http://localhost:8000\", \"LmT3VFkGhD\");\n\n    this.state = {\n      username: cookie.get(\"username\"),\n      messages: [],\n      message: null\n    };\n\n    console.log(this.state);\n  }\n  componentDidMount() {\n    this.subscribe();\n    this.loadMessages();\n  }\n\n  subscribe() {\n    this.supabase\n      .from(\"messages\")\n      .eq(\"sender\", \"John\")\n      .on(\"*\", payload => {\n        console.log(\"REALTIME! \", payload);\n        console.log(\"/??? \", payload.new);\n\n        // This is meant to test out ChangeMapper\n        // let change = ChangeMapper.convertChangeData(payload.columns, payload.record)\n        // console.log('this is the change ', change)\n\n        let updatedMessages = this.state.messages;\n        updatedMessages.push(payload.new);\n\n        this.setState({ messages: updatedMessages });\n      })\n      .subscribe();\n  }\n\n  async loadMessages() {\n    let messages = await this.supabase\n      .from(\"messages\")\n      .select()\n      // .eq('id', '2')\n      .order(\"inserted_at\", true);\n    // .single()\n\n    console.log(\"lo and behold \", messages);\n\n    this.setState({ messages: messages.body });\n  }\n\n  async sendMessage() {\n    let payload = [\n      {\n        sender: this.state.username,\n        message: this.state.message,\n        inserted_at: moment().format()\n      },\n      { sender: \"John\", message: \"BOO\", inserted_at: moment().format() }\n    ];\n\n    let test = await this.supabase.from(\"messages\").insert(payload);\n\n    console.log(\"this is what is returned \", test);\n\n    this.setState({ message: \"\" });\n  }\n\n  render() {\n    return (\n      <div style={styles.main}>\n        <h1>Hello</h1>\n        {this.state.messages.map(message => {\n          return (\n            <p>\n              {message.sender}: {message.message}\n            </p>\n          );\n        })}\n        <label>Say Something!</label>\n        <input\n          type=\"text\"\n          class=\"input\"\n          id=\"message\"\n          name=\"message\"\n          value={this.state.message}\n          onChange={event => {\n            this.setState({ message: event.target.value });\n          }}\n          onKeyPress={event => {\n            if (event.key === \"Enter\") this.sendMessage();\n          }}\n        />\n        <br />\n        <button\n          onClick={() => {\n            this.sendMessage();\n          }}\n        >\n          Send\n        </button>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  main: { fontFamily: \"monospace\", padding: 30 },\n  pre: {\n    whiteSpace: \"pre\",\n    overflow: \"auto\",\n    background: \"#333\",\n    maxHeight: 200,\n    borderRadius: 6,\n    padding: 5\n  },\n  code: { display: \"block\", wordWrap: \"normal\", color: \"#fff\" }\n};\n"]},"metadata":{},"sourceType":"module"}