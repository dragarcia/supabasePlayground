{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/angelico/Desktop/Supabase/testingGround/simpleChat/pages/chatScreen.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createClient } from '@supabase/supabase-js';\nimport cookie from 'js-cookie';\nimport moment from 'moment';\n\nvar ChatScreen =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChatScreen, _React$Component);\n\n  function ChatScreen() {\n    var _this;\n\n    _classCallCheck(this, ChatScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatScreen).call(this));\n    _this.supabase = createClient('http://localhost:8000', 'LmT3VFkGhD');\n    _this.state = {\n      username: cookie.get('username'),\n      messages: [],\n      message: null\n    };\n    console.log(_this.state);\n    return _this;\n  }\n\n  _createClass(ChatScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscribe();\n      this.loadMessages();\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe() {\n      var _this2 = this;\n\n      this.supabase.from('messages').eq('sender', 'John').on('*', function (payload) {\n        console.log('REALTIME! ', payload);\n        console.log('/??? ', payload[\"new\"]); // This is meant to test out ChangeMapper\n        // let change = ChangeMapper.convertChangeData(payload.columns, payload.record)\n        // console.log('this is the change ', change)\n\n        var updatedMessages = _this2.state.messages;\n        updatedMessages.push(payload[\"new\"]);\n\n        _this2.setState({\n          messages: updatedMessages\n        });\n      }).subscribe();\n    }\n  }, {\n    key: \"loadMessages\",\n    value: function loadMessages() {\n      var messages;\n      return _regeneratorRuntime.async(function loadMessages$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.supabase.from('messages').select().order('inserted_at', true));\n\n            case 2:\n              messages = _context.sent;\n              this.setState({\n                messages: messages.body\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage() {\n      var payload, test;\n      return _regeneratorRuntime.async(function sendMessage$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              payload = {\n                sender: this.state.username,\n                message: this.state.message,\n                inserted_at: moment().format()\n              };\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(this.supabase.from('messages').insert(payload));\n\n            case 3:\n              test = _context2.sent;\n              console.log('this is what is returned ', test);\n              this.setState({\n                message: ''\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return __jsx(\"div\", {\n        style: styles.main,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Hello\"), this.state.messages.map(function (message) {\n        return __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, message.sender, \": \", message.message);\n      }), __jsx(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Say Something!\"), __jsx(\"input\", {\n        type: \"text\",\n        \"class\": \"input\",\n        id: \"message\",\n        name: \"message\",\n        value: this.state.message,\n        onChange: function onChange(event) {\n          _this3.setState({\n            message: event.target.value\n          });\n        },\n        onKeyPress: function onKeyPress(event) {\n          if (event.key === \"Enter\") _this3.sendMessage();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), __jsx(\"button\", {\n        onClick: function onClick() {\n          _this3.sendMessage();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Send\"));\n    }\n  }]);\n\n  return ChatScreen;\n}(React.Component);\n\nexport { ChatScreen as default };\nvar styles = {\n  main: {\n    fontFamily: 'monospace',\n    padding: 30\n  },\n  pre: {\n    whiteSpace: 'pre',\n    overflow: 'auto',\n    background: '#333',\n    maxHeight: 200,\n    borderRadius: 6,\n    padding: 5\n  },\n  code: {\n    display: 'block',\n    wordWrap: 'normal',\n    color: '#fff'\n  }\n};","map":{"version":3,"sources":["/Users/angelico/Desktop/Supabase/testingGround/simpleChat/pages/chatScreen.js"],"names":["createClient","cookie","moment","ChatScreen","supabase","state","username","get","messages","message","console","log","subscribe","loadMessages","from","eq","on","payload","updatedMessages","push","setState","select","order","body","sender","inserted_at","format","insert","test","styles","main","map","event","target","value","key","sendMessage","React","Component","fontFamily","padding","pre","whiteSpace","overflow","background","maxHeight","borderRadius","code","display","wordWrap","color"],"mappings":"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","sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport cookie from 'js-cookie'\nimport moment from 'moment'\n\nexport default class ChatScreen extends React.Component {\n  constructor() {\n    super()\n    this.supabase = createClient('http://localhost:8000', 'LmT3VFkGhD')\n\n    this.state = {\n      username: cookie.get('username'),\n      messages: [],\n      message: null,\n    }\n\n    console.log(this.state)\n  }\n  componentDidMount() {\n    this.subscribe()\n    this.loadMessages()\n  }\n\n  subscribe() {\n    this.supabase\n      .from('messages')\n      .eq('sender', 'John')\n      .on('*', payload => {\n        console.log('REALTIME! ', payload)\n        console.log('/??? ', payload.new)\n\n        // This is meant to test out ChangeMapper\n        // let change = ChangeMapper.convertChangeData(payload.columns, payload.record)\n        // console.log('this is the change ', change)\n        \n        let updatedMessages = this.state.messages\n        updatedMessages.push(payload.new)\n        \n        this.setState({messages: updatedMessages})\n      })\n      .subscribe()\n  }\n\n  async loadMessages() {\n    let messages = await this.supabase\n      .from('messages')\n      .select()\n      .order('inserted_at', true)\n\n    this.setState({ messages: messages.body })\n  }\n\n  async sendMessage() {\n    let payload = {\n      sender: this.state.username,\n      message: this.state.message,\n      inserted_at: moment().format()\n    }\n    \n    let test = await this.supabase\n      .from('messages')\n      .insert(payload)\n\n    console.log('this is what is returned ', test)\n\n    this.setState({message: ''})\n  }\n\n  render() {\n    return (\n      <div style={styles.main}>\n        <h1>Hello</h1>\n        {this.state.messages.map(message => {\n          return (\n            <p>\n              {message.sender}: {message.message}\n            </p>\n          )\n        })}\n        <label>Say Something!</label>\n        <input\n          type=\"text\"\n          class=\"input\"\n          id=\"message\"\n          name=\"message\"\n          value={this.state.message}\n          onChange={event => {\n            this.setState({ message: event.target.value })\n          }}\n          onKeyPress={event => {\n            if(event.key === \"Enter\") this.sendMessage()\n          }}\n        />\n        <br />\n        <button\n          onClick={() => {\n            this.sendMessage()\n          }}\n        >\n          Send\n        </button>\n      </div>\n    )\n  }\n}\n\nconst styles = {\n  main: { fontFamily: 'monospace', padding: 30 },\n  pre: {\n    whiteSpace: 'pre',\n    overflow: 'auto',\n    background: '#333',\n    maxHeight: 200,\n    borderRadius: 6,\n    padding: 5,\n  },\n  code: { display: 'block', wordWrap: 'normal', color: '#fff' },\n}"]},"metadata":{},"sourceType":"module"}